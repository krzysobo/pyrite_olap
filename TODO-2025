TODO and Changes in the Cubes in 2025
====================
As I (Krzysztof Sobolewski) in 2025 have created a fork of the great project "cubes" by Stefan Urbanek, and named the fork "cubes_anew",
I've created a new set of goals to be fulfilled:

- constraining SQLAlchemy to 1.40 for now; 2.0 has a lot of deprecative changes related to binding a connection to metadata objects, that
struggling with them for now would create a hasslle. TODO for the future.

- making the project run both on Python 3.9 and Python 3.12

- rewriting the server.py part as a new script server_api.py. Nowadays the server.py has the "read" functions only,
while the target server_api.py MUST contain all useful functions, including:
    - cube creation, modification, removal
    - workspace creation, modification, removal
    - data updating
    - making calculations
    - new types of calculations including forecasting


- tidying up paths. a lot of relative paths make a havoc, the project should be concise and work from the root directory (and running commands like slicer installed by pip should be an OPTION, not the only choice)


- what is in Slicer (cubes/slicer/commands.py)
    - cli - commands 

    - serve - development server

    - ext-info - extension info - cube extensions list

    - list - list of cubes (name, label, description)
    - model - information about model metadata, including errors/validation

    - test - testing a cube, including testful aggregation,  store etc

    - convert - conversion of model between model formats


    === commands for SQL store ====================
    - sql - sql store commands
            """SQL store commands"""

    - denormalize
            """Create denormalized view(s) from cube(s)."""

    - aggregate - sql_aggregate - aggregation of cubes (a selected cube or all cubes, if not specified)
            """Create pre-aggregated table from cube(s). If no cube is specified, then
            all cubes are aggregated. Target table can be specified only for one cube,
            for multiple cubes naming convention is used.
    """

    - members
            """Aggregate a cube"""


---------------------------------------
---------------------------------------
---------------------------------------


- creating a useful frontend, preferably in Angular or VueJs
- creating a useful multiplatform app (Android and Desktop), preferably in Kotlin + Compose Multiplatform
- creating export-import functions for compatibility with other OLAP solutions, as well as for backup
- adding some MDX parser (
    MDXPY?
        https://pypi.org/project/mdxpy/
        https://code.cubewise.com/open-source/tm1py/mdxpy/
        https://github.com/cubewise-code/mdxpy

- data exchange with some Spreadsheet software, probably using XMLA format
